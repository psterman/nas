// 文件管理器类
class FileManager {
    constructor() { this.currentPath = '/'; this.files = []; this.initializeEventListeners(); }
    initializeEventListeners() { const dropZone = document.getElementById('file-drop-zone'); if (dropZone) { dropZone.addEventListener('dragover', (e) => { e.preventDefault(); e.stopPropagation(); dropZone.classList.add('drag-over'); }); dropZone.addEventListener('dragleave', () => { dropZone.classList.remove('drag-over'); }); dropZone.addEventListener('drop', (e) => { e.preventDefault(); e.stopPropagation(); dropZone.classList.remove('drag-over'); const files = Array.from(e.dataTransfer.files); this.handleFileUpload(files); }); } }
    initializeEventListeners() { const dropZone = document.getElementById('file-drop-zone'); if (dropZone) { dropZone.addEventListener('dragover', (e) => { e.preventDefault(); e.stopPropagation(); dropZone.classList.add('drag-over'); }); dropZone.addEventListener('dragleave', () => { dropZone.classList.remove('drag-over'); }); dropZone.addEventListener('drop', (e) => { e.preventDefault(); e.stopPropagation(); dropZone.classList.remove('drag-over'); const files = Array.from(e.dataTransfer.files); this.handleFileUpload(files); }); } }
    uploadFile() { const input = document.createElement('input'); input.type = 'file'; input.multiple = true; input.onchange = (e) => { this.handleFileUpload(Array.from(e.target.files)); }; input.click(); }
    handleFileUpload(files) { console.log('上传文件:', files.map(f => f.name)); }
    createFolder() { const folderName = prompt('请输入文件夹名称:'); if (folderName) { console.log('创建文件夹:', folderName); } }
    searchFiles() { const searchInput = document.getElementById('search-input'); const keyword = searchInput.value.trim(); if (keyword) { console.log('搜索文件:', keyword); this.loadFiles(this.currentPath, keyword); } }
    downloadFile(fileName) { console.log('下载文件:', fileName); } shareFile(fileName) { console.log('共享文件:', fileName); } deleteFile(fileName) { if (confirm('确定要删除文件 ' + fileName + ' 吗？')) { console.log('删除文件:', fileName); } }
} const fileManager = new FileManager(); document.addEventListener('DOMContentLoaded', () => { fileManager.loadFiles('/'); });
getFileType(fileName) { const ext = fileName.split('.').pop().toLowerCase(); const imageExts = ['jpg', 'jpeg', 'png', 'gif', 'webp']; const textExts = ['txt', 'md', 'json', 'js', 'css', 'html']; const videoExts = ['mp4', 'webm', 'ogg']; const audioExts = ['mp3', 'wav', 'ogg']; if (imageExts.includes(ext)) return 'image'; if (textExts.includes(ext)) return 'text'; if (videoExts.includes(ext)) return 'video'; if (audioExts.includes(ext)) return 'audio'; return 'other'; }
sortFiles(files) { return [...files].sort((a, b) => { if (a.type === 'folder' && b.type !== 'folder') return -1; if (a.type !== 'folder' && b.type === 'folder') return 1; let comparison = 0; switch (this.sortBy) { case 'name': comparison = a.name.localeCompare(b.name); break; case 'size': const aSize = this.parseSize(a.size); const bSize = this.parseSize(b.size); comparison = aSize - bSize; break; case 'modified': const aDate = new Date(a.modified); const bDate = new Date(b.modified); comparison = aDate - bDate; break; case 'share': comparison = (a.shared === b.shared) ? 0 : a.shared ? -1 : 1; break; } return this.sortOrder === 'asc' ? comparison : -comparison; }); }
parseSize(sizeStr) { if (!sizeStr || sizeStr === '-') return 0; const matches = sizeStr.match(/^([\d.]+)\s*([KMGT]?B)$/i); if (!matches) return 0; const size = parseFloat(matches[1]); const unit = matches[2].toUpperCase(); const multipliers = { 'B': 1, 'KB': 1024, 'MB': 1024 * 1024, 'GB': 1024 * 1024 * 1024, 'TB': 1024 * 1024 * 1024 * 1024 }; return size * (multipliers[unit] || 1); }
renameFile(fileName) { const newName = prompt('请输入新的文件名:', fileName); if (newName && newName !== fileName) { console.log('重命名文件:', fileName, '->', newName); this.loadFiles(this.currentPath); } }
moveFile(fileName) { const targetPath = prompt('请输入目标路径:', this.currentPath); if (targetPath) { console.log('移动文件:', fileName, '到', targetPath); this.loadFiles(this.currentPath); } }
class ShareMapping { constructor() { this.mappings = new Map(); } addMapping(virtualPath, realPath) { this.mappings.set(virtualPath, realPath); } getMapping(virtualPath) { return this.mappings.get(virtualPath); } }
constructor() { this.currentPath = '/'; this.files = []; this.shareMapping = new ShareMapping(); this.initializeEventListeners(); this.initializeSharedFolders(); } initializeSharedFolders() { // 添加示例映射 this.shareMapping.addMapping('/shared/documents', 'C:/Users/Public/Documents'); this.shareMapping.addMapping('/shared/pictures', 'C:/Users/Public/Pictures'); this.shareMapping.addMapping('/shared/downloads', 'C:/Users/Public/Downloads'); }
    loadFiles(path, searchKeyword = '') { const realPath = this.shareMapping.getMapping(path) || path; console.log('加载路径:', realPath, searchKeyword ? '搜索关键词:' + searchKeyword : ''); // 这里应该通过后端API获取文件列表 const mockFiles = [{ name: '文档.txt', size: '2.5MB', modified: '2024-03-14 10:30', shared: false }, { name: '图片', type: 'folder', modified: '2024-03-13 15:20', shared: true }]; // 添加映射文件夹 if (path === '/') { this.shareMapping.mappings.forEach((realPath, virtualPath) => { const folderName = virtualPath.split('/').filter(p => p)[0]; mockFiles.push({ name: folderName, type: 'folder', modified: new Date().toLocaleString(), shared: true, isMapping: true }); }); } this.renderFiles(mockFiles); }
showWelcomeGuide() { const guide = document.createElement('div'); guide.className = 'welcome-guide'; guide.innerHTML = '<div class="guide-content"><h2>欢迎使用文件管理系统</h2><div class="guide-steps"><div class="guide-step"><span class="step-icon upload"></span><h3>上传文件</h3><p>点击上传按钮或拖拽文件到此处</p></div><div class="guide-step"><span class="step-icon folder"></span><h3>创建文件夹</h3><p>点击新建文件夹按钮组织文件</p></div><div class="guide-step"><span class="step-icon share"></span><h3>分享文件</h3><p>点击分享按钮生成分享链接</p></div></div><button class="btn btn-primary" onclick="this.closest(\'.welcome-guide\').remove()">开始使用</button></div>'; document.body.appendChild(guide); }
document.addEventListener('DOMContentLoaded', () => { if (!localStorage.getItem('welcomeGuideShown')) { fileManager.showWelcomeGuide(); localStorage.setItem('welcomeGuideShown', 'true'); } });
navigateTo(path) { this.currentPath = path; this.loadFiles(path); }
